def is_safe(board, row, col, n):
    # Check if there's a queen in the same row or column
    for i in range(col):
        if board[row][i] == 1:
            return False
    
    # Check upper left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check lower left diagonal
    for i, j in zip(range(row, n), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

def solve_n_queens_util(board, col, n):
    if col >= n:
        return True

    for row in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1  # Place queen at position (row, col)
            
            if solve_n_queens_util(board, col + 1, n):  # Move to next column
                return True
            
            board[row][col] = 0  # Backtrack if no valid solution found
    
    return False

def solve_n_queens(n):
    board = [[0] * n for _ in range(n)]  # Initialize empty chessboard
    if solve_n_queens_util(board, 0, n):  # Start from the first column
        return board
    else:
        return None

def print_board(board):
    for row in board:
        print(' '.join('Q' if cell == 1 else '.' for cell in row))

# Get user input for the size of the board (n)
n = int(input("Enter the value of n (size of the board and number of queens): "))

# Solve the N-Queens problem for the given size
solution = solve_n_queens(n)

if solution:
    print(f"Solution for {n}-Queens problem:")
    print_board(solution)
else:
    print(f"No solution exists for {n}-Queens problem.")

